/*
 * Copyright (C) 2023 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.google.copybara.util;

import static com.google.common.truth.Truth.assertThat;
import static java.nio.charset.StandardCharsets.UTF_8;

import com.google.common.collect.ImmutableMap;
import java.io.IOException;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

@RunWith(JUnit4.class)
public final class SinglePatchTest {

  private static final byte[] emptyDiff = {};
  private static final ImmutableMap<String, String> emptyHashes = ImmutableMap.of();

  @Test
  public void testPatchContainsHeader() throws IOException {
    SinglePatch singlePatch = new SinglePatch(emptyHashes, emptyDiff);
    byte[] singlePatchBytes = singlePatch.toBytes();

    assertThat(new String(singlePatchBytes, UTF_8)).contains("This file is generated by Copybara");
  }

  @Test
  public void testSerializeEmptyPatch() throws IOException {
    SinglePatch emptyPatch = new SinglePatch(emptyHashes, emptyDiff);
    byte[] emptyPatchBytes = emptyPatch.toBytes();

    SinglePatch deserializedPatch = SinglePatch.fromBytes(emptyPatchBytes);

    assertThat(deserializedPatch).isEqualTo(emptyPatch);
  }

  @Test
  public void testDeserializedObjectIsEquivalent_hashOnly() throws IOException {
    SinglePatch testSinglePatch = new SinglePatch(ImmutableMap.of("test/path", "123457testhash"),
        emptyDiff);
    byte[] testPatchBytes = testSinglePatch.toBytes();

    SinglePatch deserializedPatch = SinglePatch.fromBytes(testPatchBytes);

    assertThat(deserializedPatch).isEqualTo(testSinglePatch);
  }

  @Test
  public void testDeserializedObjectNotEquivalent_differentHash() throws IOException {
    SinglePatch singlePatch = new SinglePatch(ImmutableMap.of("test/path", "123457testhash"),
        emptyDiff);

    SinglePatch differentPatch = new SinglePatch(ImmutableMap.of("different/path", "newhash"),
        emptyDiff);
    byte[] differentPatchBytes = differentPatch.toBytes();

    SinglePatch deserializedPatch = SinglePatch.fromBytes(differentPatchBytes);

    assertThat(deserializedPatch).isNotEqualTo(singlePatch);
  }

  @Test
  public void testDeserializedObjectIsEquivalent_diffOnly() throws IOException {
    SinglePatch testSinglePatch = new SinglePatch(emptyHashes, "diff1\ndiff2\ndiff3\n".getBytes(
        UTF_8));
    byte[] testPatchBytes = testSinglePatch.toBytes();

    SinglePatch deserializedPatch = SinglePatch.fromBytes(testPatchBytes);

    assertThat(deserializedPatch).isEqualTo(testSinglePatch);
  }

  @Test
  public void testDeserializedObjectNotEquivalent_differentDiff() throws IOException {
    ImmutableMap<String, String> hashes = ImmutableMap.of("test/path", "123457testhash");
    SinglePatch singlePatch = new SinglePatch(hashes, "originalDiff\ntest\ntest\n".getBytes(
        UTF_8));

    SinglePatch differentPatch = new SinglePatch(hashes, "differentDiff\ntest\ntest\n".getBytes(
        UTF_8));
    byte[] differentPatchBytes = differentPatch.toBytes();

    SinglePatch deserializedPatch = SinglePatch.fromBytes(differentPatchBytes);

    assertThat(deserializedPatch).isNotEqualTo(singlePatch);
  }
}
